# Enable logging
import logging
from telegram.ext import (
    ConversationHandler,
    CallbackContext,
)
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update, Bot
import db
import settings

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)

NAME, IS_ONLINE, TRANSPORT, PHONE, AGE, HAS_PARTICIPATED, IS_PHONE, OCCUPATION, HOW_MET, IS_PAPER, TOWN, RIGHTS = range(12)

options_msg = "\n\n" \
              "<i>–ù–∞ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –í—ã –¥–æ–ª–∂–Ω—ã <b>–≤—ã–±—Ä–∞—Ç—å</b> –æ—Ç–≤–µ—Ç –∏–∑ –Ω–∏–∂–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. " \
              "–ï—Å–ª–∏ –í—ã –Ω–µ –≤–∏–¥–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è" \
              " (–æ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–ø—Ä–∞–≤–∞ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞)</i>"

stop_msg = "\n\n" \
           "<i>–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /cancel " \
           "(–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ –∫–ª–∏–∫–Ω—É—Ç—å).</i>"

def register(update: Update, context: CallbackContext) -> int:
    first_name, user_id = update.effective_user.first_name, update.effective_user.id
    logger.info("User %s %s started registration", user_id, first_name)

    context.user_data['user_id'] = str(user_id)
    context.user_data['username'] = str(update.effective_user.username)
    context.user_data['tg_name'] = str(update.effective_user.first_name) + " " + str(update.effective_user.last_name)

    update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç –§–æ—Ç–æ–í–µ–ª–æ –ë–æ—Ç ü§ñ.\n'
        '–†–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å –≤ —ç—Ç–æ–º —Å–µ–∑–æ–Ω–µ! '
        '–ù–∞–¥–µ—é—Å—å, —á—Ç–æ –º—ã –ø–æ–¥—Ä—É–∂–∏–º—Å—è!\n'
        '–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å (—Ñ–∞–º–∏–ª–∏—è, –∏–º—è) \n\n'
        '<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b>\n'
        '–ò–≤–∞–Ω–æ–≤–∏—á –ò–≤–∞–Ω' + stop_msg,
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove(),
    )

    return NAME


def name(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    reply_keyboard = [['–û–Ω–ª–∞–π–Ω', '–û—Ñ—Ñ–ª–∞–π–Ω']]
    logger.info("Name of %s: %s", user.first_name, update.message.text)

    context.user_data['name'] = update.message.text

    update.message.reply_text(
        '–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å?' + options_msg + stop_msg,
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True,
                                         resize_keyboard=True),
        parse_mode = "HTML"
    )

    return IS_ONLINE


def is_online(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    logger.info("Is online of %s: %s", user.first_name, update.message.text)
    reply_keyboard = [['–í–µ–ª–æ—Å–∏–ø–µ–¥', '–°–∞–º–æ–∫–∞—Ç', '–≠–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç'], ['–†–æ–ª–∏–∫–∏', '–°–∫–µ–π—Ç–±–æ—Ä–¥', '–ë–µ–≥']]

    context.user_data['is_online'] = update.message.text == "–û–Ω–ª–∞–π–Ω"

    update.message.reply_text(
        '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!\n'
        '–ê —Å–µ–π—á–∞—Å –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ' + options_msg + stop_msg,
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True),
    )

    return TRANSPORT


def transport(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    logger.info("Is online of %s: %s", user.first_name, update.message.text)

    context.user_data['transport'] = update.message.text

    update.message.reply_text(
        '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ê —Å–µ–π—á–∞—Å –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–º–µ—Ä –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, '
        '–ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–π—Ç–∏ —Å –í–∞–º–∏ –Ω–∞ —Å–≤—è–∑—å?\n\n'
        '<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b>\n'
        '+375292304825' + stop_msg,
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove(),
    )

    return PHONE


def phone(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    logger.info("Phone of %s: %s", user.first_name, update.message.text)

    context.user_data['phone'] = update.message.text

    update.message.reply_text('–°–ø–∞—Å–∏–±–æ!\n'
                              '–ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç –Ω–∞ –º–æ–º–µ–Ω—Ç —É—á–∞—Å—Ç–∏—è –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏?\n\n'
                              '<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b>\n'
                              '18' + stop_msg,
                              parse_mode="HTML")

    return AGE


def age(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    logger.info("Age of %s: %s", user.first_name, update.message.text)

    context.user_data['age'] = update.message.text

    reply_keyboard = [['–î–∞', '–ù–µ—Ç']]
    update.message.reply_text('–£—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –ª–∏ –í—ã —Ä–∞–Ω–µ–µ –≤ —Ñ–æ—Ç–æ–≤–µ–ª–æ?' + options_msg + stop_msg,
                              reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True,
                                                               resize_keyboard=True),
                              parse_mode="HTML"
                              )

    return HAS_PARTICIPATED


def has_participated(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    logger.info("User %s participation is %s", user.first_name, update.message.text)

    context.user_data['has_participated'] = update.message.text == "–î–∞"

    reply_keyboard = [['–¢–µ–ª–µ—Ñ–æ–Ω', '–§–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç']]
    update.message.reply_text('–í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ —Å –ø–æ–º–æ—â—å—é —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∫–∞–º–µ—Ä—ã?' + options_msg + stop_msg,
                              reply_markup=ReplyKeyboardMarkup(reply_keyboard,
                                                               one_time_keyboard=True,
                                                               resize_keyboard=True),
                              parse_mode="HTML"
                              )

    return IS_PHONE


def is_phone(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    logger.info("Way of taking photos of %s is %s", user.first_name, update.message.text)

    context.user_data['way'] = "phone" if update.message.text == "–¢–µ–ª–µ—Ñ–æ–Ω" else "camera"

    update.message.reply_text('–°–∫–∞–∂–∏—Ç–µ, –∫–µ–º –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –∏/–∏–ª–∏ –Ω–∞ –∫–æ–≥–æ —É—á–∏—Ç–µ—Å—å?\n\n'
                              '<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b>\n'
                              '–£—á–∏—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, —Å—Ç—É–¥–µ–Ω—Ç 3-–≥–æ –∫—É—Ä—Å–∞ –§–ü–ú–ò' + stop_msg,
                              reply_markup=ReplyKeyboardRemove(),
                              parse_mode="HTML"
                              )

    return OCCUPATION


def occupation(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    logger.info("Occupation of %s is %s", user.first_name, update.message.text)

    context.user_data['occupation'] = update.message.text

    update.message.reply_text('–ê –∫–∞–∫ –í—ã —É–∑–Ω–∞–ª–∏ –æ —Ñ–æ—Ç–æ–≤–µ–ª–æ?\n\n'
                              '<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b>\n'
                              '–ü–æ–¥—Å–∫–∞–∑–∞–ª–∏ –¥—Ä—É–∑—å—è, –≤–∫, –∏–Ω—Å—Ç–∞–≥—Ä–∞–º' + stop_msg,
                              parse_mode="HTML")

    return HOW_MET


def how_met(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user

    logger.info("how_met of %s is %s", user.first_name, update.message.text)
    context.user_data['how_met'] = update.message.text

    reply_keyboard = [['–î–∞', '–ù–µ—Ç']]
    update.message.reply_text('–°—Ç–æ–∏—Ç –ª–∏ –ø–µ—á–∞—Ç–∞—Ç—å –í–∞–º –ø—Ä–æ–¥—É–∫—Ü–∏—é –Ω–∞ –±—É–º–∞–≥–µ?' + options_msg + stop_msg,
                              reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True,
                                                               resize_keyboard=True),
                              parse_mode="HTML")

    return IS_PAPER


def is_paper(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    logger.info("is paper of %s is %s", user.first_name, update.message.text)

    context.user_data['is_paper'] = update.message.text == "–î–∞"

    reply_keyboard = [['–î–∞', '–ù–µ—Ç']]
    update.message.reply_text('–ó–Ω–∞–µ—Ç–µ –ª–∏ –í—ã, —á—Ç–æ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –º–æ–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ —Ç–æ–ª—å–∫–æ –≤ –ú–∏–Ω—Å–∫–µ?' + options_msg + stop_msg,
                              reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True,
                                                               resize_keyboard=True),
                              parse_mode="HTML")

    return TOWN


def town(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    logger.info("is town ok for %s is %s", user.first_name, update.message.text)

    context.user_data['is_town'] = update.message.text == "–î–∞"

    reply_keyboard = [['–î–∞', '–ù–µ—Ç']]
    update.message.reply_text('–í—Å—é –Ω–∞–ø–∏—Å–∞–Ω–Ω—É—é –∑–¥–µ—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∂–µ, —è –¥–∞–º –æ–± —ç—Ç–æ–º –∑–Ω–∞—Ç—å.\n\n'
                              '–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É <b>–î–∞</b>, –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –Ω–∞—à–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏:\n'
                              '1. –£—á–∞—Å—Ç–Ω–∏–∫ –æ–±—è–∑–∞–Ω –∑–Ω–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –¥–æ—Ä–æ–∂–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è –∏ —Å–æ–±–ª—é–¥–∞—Ç—å –∏—Ö.\n'
                              '2. –£—á–∞—Å—Ç–Ω–∏–∫ —Å–∞–º –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —Å–µ–±—è –∏ —Å–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ.\n\n'
                              '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?' + options_msg + stop_msg,
                              parse_mode="HTML",
                              reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True,
                                                               resize_keyboard=True))

    return RIGHTS


def rights(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    logger.info("user %s is agreed with rights %s", user.first_name, update.message.text)

    if update.message.text == "–î–∞":
        update.message.reply_text('–°–ø–∞—Å–∏–±–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–∫–æ–Ω—á–µ–Ω–∞, —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ ü§ñ',
                                  reply_markup=ReplyKeyboardRemove())
        logger.info("User %s finished registration", user.first_name)

        if db.write_user_to_db(context.user_data):
            settings.bot.send_message(chat_id=settings.ader_id, text=f"üí™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{context.user_data['name']}</b>"
                                                            f" —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", parse_mode="HTML")
            settings.bot.send_message(chat_id=settings.marika_id, text=f"üí™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{context.user_data['name']}</b>"
                                                            f" —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", parse_mode="HTML")
    elif update.message.text == "–ù–µ—Ç":
        update.message.reply_text('–û—á–µ–Ω—å –∂–∞–ª—å, –Ω–∞–¥–µ—é—Å—å, —á—Ç–æ –í—ã –µ—â–µ –∑–∞—Ö–æ—Ç–∏—Ç–µ –∫–æ –º–Ω–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è ü§ñ',
                                  reply_markup=ReplyKeyboardRemove())

    return ConversationHandler.END
